// Time Complexity -- O(N)
// Space Complexity -- O(N)
class Solution
{   private:
    void insertAtTail(Node* &cloneHead, Node* &cloneTail, int data){
        Node* newNode = new Node(data);
        if(cloneHead == NULL){
            cloneHead = newNode;
            cloneTail = newNode;
            return;
        }
        else{
            cloneTail -> next = newNode;
            cloneTail = newNode;
        }
    }
    public:
    Node *copyList(Node *head)
    {
        //Write your code here
        //step 1: create a cloned list using next pointer of original list
        Node* cloneHead = NULL;
        Node* cloneTail = NULL;
        
        Node* temp = head;
        while(temp!=NULL){
            insertAtTail(cloneHead, cloneTail, temp->data);
            temp = temp->next;
        }
        
        //step 2: Creating a map
        unordered_map<Node*, Node*> oldToNewNode;
        Node* originalNode = head;
        Node* cloneNode = cloneHead;
        while(originalNode!=NULL && cloneNode!=NULL){
            oldToNewNode[originalNode] = cloneNode;
            originalNode = originalNode->next;
            cloneNode = cloneNode->next;
        }
        
        //step 3: set random pointers in cloned linked list
        originalNode = head;
        cloneNode = cloneHead;
        while(originalNode!=NULL && cloneNode!=NULL){
            cloneNode->arb = oldToNewNode[originalNode->arb];
            originalNode = originalNode->next;
            cloneNode = cloneNode->next;
        }
        return cloneHead;
    }

};

